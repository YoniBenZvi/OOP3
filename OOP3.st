Object subclass: #MyObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyObject class	instanceVariableNames: ''!!MyObject class methodsFor: 'compiling' stamp: 'compile:where: 12/7/2018 13:15'!compile: aSourceCode where: anOrderedCollection	|sourceCodeLines numOfArgs newCompileCheck newCode|	sourceCodeLines := aSourceCode lines.	numOfArgs := (sourceCodeLines at: 1) occurrencesOf: $:.	(numOfArgs ~~ anOrderedCollection size) ifTrue:		[AssertionFailure signal: 'Can not compile method, number of arguments is not equal to the number of constraints!!'].	newCompileCheck := self getCompileCheck: (((sourceCodeLines at: 1 ) copyReplaceAll: ':' with: ': ') findTokens: ' ') where: anOrderedCollection.	newCode := self insertCompileCheck: newCompileCheck toCode: sourceCodeLines.	Transcript show: newCode.	self compile: newCode.! !!MyObject class methodsFor: 'compiling' stamp: 'compile:where: 12/7/2018 13:34'!getCompileCheck: selectorWithArgsArray where: anOrderedCollection	|endL addTab compileCheck|	endL := Character cr asString. 	addTab := Character tab asString. compileCheck := String new.	1 to: (anOrderedCollection size)  do: 		[:i | ((anOrderedCollection at: i ) isNil) ifFalse:[			compileCheck := compileCheck , 			addTab, '(', (selectorWithArgsArray at: (i*2)) , ' isKindOf: ', ((anOrderedCollection at: i ) asString ) , ') ',			'ifFalse: [AssertionFailure signal: ''Type mismatch!! Argument ',  i asString, 				' should be ', (anOrderedCollection at: i ) asString , '''.].' , endL.].		].	^compileCheck.	! !!MyObject class methodsFor: 'compiling' stamp: 'compile:where: 12/7/2018 13:15'!insertCompileCheck: compileCheck toCode: sourceCodeLinesArray	|i endL addTab newCode|	endL := Character cr asString. 	addTab := Character tab asString. 	newCode := (sourceCodeLinesArray at:1) , endL.	((sourceCodeLinesArray at:2) includes: $|)		ifTrue:[newCode := newCode , addTab, (sourceCodeLinesArray at:2), endL.				i := 3.]		ifFalse:[i := 2.].	newCode := newCode, compileCheck.	i to: (sourceCodeLinesArray size) do:		[:x | newCode := newCode, addTab, (sourceCodeLinesArray at:x), endL].	^newCode.! !